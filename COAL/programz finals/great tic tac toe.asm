.MODEL SMALL 
.STACK 100H
.DATA
S_PLAYER DW 0t
COUNT1 DW 0
COUNT2 DW 0
MATRIX_DB '1','2','3'
	DB '4','5','6'
	DB '7','8','9'
WINNER1    DB 10,13,"  CONGRATULATIONS!!WINNER OF THIS GAME IS PLAYER 1 ",10,13,"$"
WINNER2    DB 10,13,"CONGRATULATIONS!!WINNER OF THIS GAME IS PLAYER 2 ",10,13,"$"
DRAW DB 10,13,"OOPS!ITS A DRAW",10,13,"$"

PLAY1 DB 10D,13D,"PLAY THE FIRST PLAYER .ENTER DISGITS (1~9): $"
PLAYER DB ?,10,13, '$'
PLAY2 DB 10D,13D,"PLAy the second player .ENTER DISGITS (1~9): $"
HELP DB 10,13,"PLAYER 1: X 	 	PLAYER 2 : 0$"
TABSS DB 9,9,9,'$'

INVALID  DB 10D,13D,"DATA IS INVALID TRY (1~9) : $"
WINNER DW '9'
NEWLINE    DB 10,13 ,' $ ',10,13
SPACE   DB '  ','$'
ALREADY DB 10D,13D,"THIS ENTRY HAS NO SPACE  $"
.CODE 
MAIN PROC 
	MOV AX,@DATA
	MOV DS,AX
	CALL MY_GAMESHOW
POSITION_NEXT:
	MOV BX,COUNT2
PLAYING:
	CMP BX,0
	JE FIRST_PLAYER
	CMP BX,-1
	JE SECOND_PLAYER
	SUB BX,2
	JMP PLAYING
SECOND_PLAYER:
	MOV AH,9
	LEA DX,PLAY2
	INT 21H
	JMP INITIALIZEATION
FIRST_PLAYER:
	MOV AH,9
	LEA DX,PLAY1
	INT 21H
INITIALIZEATION:
	PUSH BX
	CALL START_GAME
	INC COUNT2
	CALL MY_GAMESHOW
	CMP COUNT2,5
	JAE WINNER__
	JMP NEXTMOVE
WINNER__:
	MOV BX,'X'
	PUSH BX
	CALL CHECKWINNER
	CMP AX,1
	JE CONGRATULATIONS_1

	MOV BX,'0'
	PUSH BX
	CALL CHECKWINNER
	CMP AX,1
	JE CONGRATULATIONS_2
	
	CMP COUNT2,9
	JE EXIT_DRAW
	JMP NEXTMOVE
CONGRATULATIONS_1:
	MOV AH,9
	LEA DX,WINNER1
	INT 21H
	JMP EXIT_
CONGRATULATIONS_2:
	MOV AH,9
	LEA DX,WINNER2
	INT 21H
	JMP EXIT_
EXIT_DRAW:
	MOV AH,9
	LEA DX,DRAW
	INT 21H
EXIT_:	
	MOV AH,4CH
	INT 21H

MAIN ENDP
MY_GAMESHOW PROC
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH SI
	PUSH DX
	MOV COUNT1,0
	MOV BX,-3
	
	MOV AH,9
	LEA DX,HELP
	INT 21H

NEXT_NEWLINE:
	XOR SI,SI
	MOV CX,'0'
	MOV AH,9
	LEA DX,NEWLINE
	INT 21H

	MOV AH,9
       LEA DX,TABSS
       INT 21H

	ADD BX,3
MAPPING_:
	MOV AH,2
	MOV DL,PLACE[BX][SI]
	INT 21H
	MOV AH,9
	LEA DX,SPACE
	INT 21H
	INC COUNT1
	INC CX
	INC SI
	CMP COUNT1,9
	JE DRAW_EXIT_
	CMP CX,'3'
	JE NEXT_NEWLINE
	JMP MAPPING_
DRAW_EXIT_:
	MOV AH,9
	LEA DX,NEWLINE
	INT 21H
	POP DX
	POP SI
	POP CX
	POP BX
	POP AX
RET
MY_GAMESHOW ENDP
START_GAME PROC
	PUSH BP
	MOV BP,SP
	MOV DX,[BP+4]
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH SI
	PUSH DX
	MOV S_PLAYER,DX
PLAYER1:
	MOV AX,0
	MOV BX,3
	LEA SI,PLACE
	MOV AH,1
	INT 21H
	MOV PLAYER,AL
	CMP PLAYER,49 	; checking valid entry 
	JB INVALID_1
	CMP PLAYER,57
	JA INVALID_1
	MOV AX,0
	MOV AL,PLAYER
	SUB AX,30H
	MOV DX,0
	DIV BX
	MOV SI,DX
	DEC SI
	MUL BX
	MOV BX,AX
	
	MOV CH,PLACE[BX][SI]
	CMP CH,'X'
	JE NOSPACE_FOR_ENTRY
	CMP CH,'0'
	JE NOSPACE_FOR_ENTRY
	JMP GOOD
	
NOSPACE_FOR_ENTRY:	
	MOV AH,9
	LEA DX,ALREADY
	INT 21H
	JMP PLAYER1
INVALID_1:
	MOV AH,9
	LEA DX,INVALID
	INT 21H
	JMP PLAYER1
GOOD:
	CMP S_PLAYER,-1
	JE PLAYER2
	MOV PLACE[BX][SI],'X'
	JMP EXIT_DRAWD
PLAYER2:
	MOV PLACE[BX][SI],'0'
EXIT_DRAWD:	
	POP DX
	POP SI
	POP CX
	POP BX
	POP AX
	POP BP
RET 2
START_GAME ENDP
CHECKWINNER PROC
	PUSH BP
	MOV BP,SP
	MOV DX,[BP+4]

	PUSH BX
	PUSH CX
	MOV WINNER,0
	
;first horizontal NEWLINE 
S1_:
	CMP PLACE[0][0],DL
	JNE S2_
	CMP PLACE[0][1],DL
	JNE S2_
	CMP PLACE[0][2],DL
	JNE S2_
	MOV WINNER,1
	JMP ENOUGH_CHECKING
;second horizontal NEWLINE 
S2_:
	LEA SI,PLACE
	CMP PLACE[3][0],DL
	JNE S3_
	CMP PLACE[3][1],DL
	JNE S3_
	CMP PLACE[3][2],DL
	JNE S3_
	MOV WINNER,1
	JMP ENOUGH_CHECKING
	
;third horizontal NEWLINE 
S3_:
	LEA SI,PLACE
	CMP PLACE[6][0],DL
	JNE S4_
	CMP PLACE[6][1],DL
	JNE S4_
	CMP PLACE[6][2],DL
	JNE S4_
	MOV WINNER,1
	JMP ENOUGH_CHECKING
	
;first vertical NEWLINE
S4_:
	LEA SI,PLACE
	CMP PLACE[0][0],DL
	JNE S5_
	CMP PLACE[3][0],DL
	JNE S5_
	CMP PLACE[6][0],DL
	JNE S5_
	MOV WINNER,1
	JMP ENOUGH_CHECKING
;second vertical NEWLINE 
S5_:
	LEA SI,PLACE
	CMP PLACE[0][1],DL
	JNE S6_
	CMP PLACE[3][1],DL
	JNE S6_
	CMP PLACE[6][1],DL
	JNE S6_
	MOV WINNER,1
	JMP ENOUGH_CHECKING
;third vertical NEWLINE
S6_:
	LEA SI,PLACE
	CMP PLACE[0][2],DL
	JNE S7_
	CMP PLACE[3][2],DL
	JNE S7_
	CMP PLACE[6][2],DL
	JNE S7_
	MOV WINNER,1
	JMP ENOUGH_CHECKING
;1_5_9 diagonal NEWLINE
S7_:
	LEA SI,PLACE
	CMP PLACE[0][0],DL
	JNE S8_
	CMP PLACE[3][1],DL
	JNE S8_
	CMP PLACE[6][2],DL
	JNE S8_
	MOV WINNER,1
	JMP ENOUGH_CHECKING
;3_5_7 diagonal NEWLINE
S8_:
	LEA SI,PLACE
	CMP PLACE[0][2],DL
	JNE ENOUGH_CHECKING
	CMP PLACE[3][1],DL
	JNE ENOUGH_CHECKING
	CMP PLACE[6][0],DL
	JNE ENOUGH_CHECKING
	MOV WINNER,1
	JMP ENOUGH_CHECKING
ENOUGH_CHECKING:
	MOV AX,WINNER
	POP CX
	POP BX
	POP BP
RET 2
CHECKWINNER ENDP
END MAIN