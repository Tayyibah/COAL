.MODEL SMALL
.STACK 100H
.DATA
    MSG1 DB 0Ah,0Dh,'Enter an AXgebraic expression $'
    MSG2 DB 0Ah,0Dh,'Too many right brackets.Begin again',0Ah,0Dh,'$'
    MSG3 DB 0Ah,0Dh,'Expression is correct $'
    MSG4 DB 0Ah,0Dh,'Type Y if u want to continue $'
    MSG5 DB 0Ah,0Dh,'Bracket mismatch.Begin again$'
    MSG6 DB 0Ah,0Dh,'Too many left brackets.Begin again',0Ah,0Dh,'$'

.CODE
MAIN PROC
    MOV AX,@DATA
    MOV DS,AX
START1:
    MOV AH,9
	LEA DX,MSG1
	INT 21H

	MOV AH,1
	INT 21H
WHILE_:
	CMP AL,0DH
	JE IS_STACK_EMPTY

	INT 21H

	CMP AL,'['
	JE PUSH_STACK
	
	CMP AL,'{'
	JE PUSH_STACK

	CMP AL,'('
	JE PUSH_STACK

	CMP AX,')'
	JE POP_STACK

	CMP AX,'}'
	JE POP_STACK

	CMP AX,']'
	JE POP_STACK

	JMP JUMP_WHILE_

PUSH_STACK:
	PUSH AX

JUMP_WHILE_:
	JMP WHILE_

POP_STACK:
	CMP SP,0
	JE DISPLAY_ERROR1
	POP BX
	CMP AX,')'
	JE CHECK_BRACKET_CORRECTNESS1
	CMP AX,'}'
	JE CHECK_BRACKET_CORRECTNESS2
	CMP AX,']'
	JE CHECK_BRACKET_CORRECTNESS3


CHECK_BRACKET_CORRECTNESS1:
	CMP BX,'('
	JE WHILE_
	MOV AH,9
	LEA DX,MSG5
	INT 21H
	JMP AGAIN_

CHECK_BRACKET_CORRECTNESS2:
	CMP BX,'{'
	JE WHILE_
	MOV AH,9
	LEA DX,MSG5
	INT 21H
	JMP AGAIN_


CHECK_BRACKET_CORRECTNESS3:
	CMP BX,'['
	JE WHILE_
	MOV AH,9
	LEA DX,MSG5
	INT 21H
	JMP AGAIN_


DISPLAY_ERROR1:
	MOV AH,9
	LEA DX,MSG2
	INT 21H
	JMP AGAIN_
	
IS_STACK_EMPTY:
	CMP SP,0
	JE END_WHILE_
	MOV AH,9
	LEA DX,MSG6
	INT 21H 

AGAIN_:
	MOV AH,9
	LEA DX,MSG4
	INT 21H 
	MOV AH,1
	INT 21H
	CMP AX,'Y'
	JE START1
	CMP AX,'y'
	JE START1
	JMP END_WHILE_

END_WHILE_:
	MOV AH,9
	LEA DX,MSG3
	INT 21H 

	MOV AH,4CH
	INT 21H
MAIN ENDP
	END MAIN
